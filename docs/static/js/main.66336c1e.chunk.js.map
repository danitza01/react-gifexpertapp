{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cate","type","value","onChange","target","getGIfs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","querySelector"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,cAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACG,sBAAMC,SAPW,SAACC,GACjBA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAML,GAAN,mBAAoBK,QAKvC,SACK,uBACIC,KAAK,OACLC,MAAQP,EACRQ,SAhBa,SAACL,GACtBF,EAAcE,EAAEM,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAWH,GAD9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAgBZM,GAhBY,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,sBAAKc,UAAU,6CAAf,UACG,qBAAKC,IAAMf,EAAKgB,IAAKN,IACrB,4BAAIA,QCoCAO,EAxCQ,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECFwB,SAAEA,GAC1B,MAA0BZ,mBAAS,CAC/BmB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAfAC,qBAAW,WAEPxB,EAASC,GACRwB,MAAM,SAAAd,GAEHe,YAAY,WACRH,EAAS,CACLf,KAAMG,EACNU,SAAS,MAEf,UAIP,CAAEpB,IACEqB,EDrBwBK,CAAc1B,GAAhCa,EAAb,EAAON,KAAaa,EAApB,EAAoBA,QAKpB,OAEI,qCACA,6BAAKpB,IAEJoB,GAAW,mBAAGJ,UAAU,oCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGK,6BAEKH,EAAOJ,KAAK,SAAAC,GACT,OAGA,aADA,CACC,EAAD,eAEQA,GADGA,EAAIC,eESpBgB,EAhCM,WAEjB,MAAoCvC,mBAAS,CAAC,SAA9C,mBAAOwC,EAAP,KAAmBzC,EAAnB,KAOA,OACI,eAAC,WAAD,WACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQyC,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAYA,GADLA,Y,MCpB3B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,cAAc,Y","file":"static/js/main.66336c1e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n                             //props desustructurar\nexport const AddCategory = ({setcategories}) => {\n    const [inputValue, setInputValue] = useState('Hola mundo')\n\n    const inputValueCHange = (e) => {\n        setInputValue(e.target.value);\n\n    }\n\n    const handleSumit = (e) => {\n        e.preventDefault();\n        setcategories(cate => [ inputValue,...cate ]);\n\n\n    }\n    return (\n       <form onSubmit={handleSumit}>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange = { inputValueCHange}\n            />\n        </form>\n\n    )\n}\nAddCategory.propTypes = {\n\n    setcategories: PropTypes.func.isRequired\n}\n\n","\nexport const getGIfs = async( category ) => { \n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=mg0xjGWZucA88Pt1VbUYkd31XqOqmkBT`\n\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n\n    });\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {title, url} ) => {\n\n    \n    return (\n        <div className=\"card animate__animated animate__backInDown\">\n           <img src= {url} alt={title}/>\n           <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n\n    const {data: images,loading} = useFetchGifs( category );\n\n   \n    \n\n    return (\n\n        <>\n        <h3>{category}</h3>\n\n        {loading && <p className=\"animate__animated animate__fadeIn\">loading</p>}\n\n       <div className=\"card-grid\">\n            \n            \n            <ol>\n                {\n                 images.map( img => {\n                    return (\n        \n                    //<li key= {id} > {title}</li>\n                    <GifGridItem \n                        key = {img.id}\n                        {...img} \n                    />\n            \n                    )\n                 })\n                }\n             </ol>\n\n             </div>\n        \n        </>\n    )\n}\n\nexport default GifGrid;","\nimport { useEffect, useState } from \"react\";\n\nimport { getGIfs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n\n    });\n\n    \n    useEffect( () => {\n       \n        getGIfs( category )\n        .then( img => {\n            \n            setTimeout( () => {\n                setstate({\n                    data: img,\n                    loading: false\n                });\n            },3000)\n            \n        })\n        \n    }, [ category ])\n    return state;\n}","import React, {Fragment} from 'react';\nimport { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n\n    const [categories, setcategories] = useState(['hola'])\n\n    /*const handleAdd = () => {\n        setcategories(cate => [...cate, 'k']);\n        \n    }*/\n    \n    return(\n        <Fragment>\n        <h2>GifExpertApp</h2>\n        <AddCategory setcategories={setcategories}/>\n        <hr/>\n        \n        <ol>\n            {\n                categories.map( category => (\n                    <GifGrid \n                    key= { category }\n                    category = {category}\n                    \n                    \n                    />\n                )  )\n            }\n        </ol>\n        </Fragment>\n        \n    );\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.querySelector('#root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}